# CH11 그리디 문제
# 06 볼링공 고르기

import heapq 

# food_times : 음식 먹는데 걸리는 시간의 배열 (음식 번호 순으로) 
# k : 방송이 중단된 시간  

def solution(food_times, k):
    q = []
    # (음식 시간, 음식 번호) 순으로 우선 순위 큐 q에 삽입
    for i, food_time in enumerate(food_times, start=1): 
        heapq.heappush(q, (food_time, i)) 

    sum_value = 0 # 먹기 위해 사용한 시간
    previous = 0 # 직전에 다 먹은 음식 시간
    length = len(food_times) # 남은 음식의 개수

    # sum_value + (현재의 음식 시간 - 이전 음식 시간) * 현재 음식 개수와 k 비교
    while sum_value + ((q[0][0] - previous) * length) <= k:
        now = heapq.heappop(q)[0]
        sum_value += (now - previous) * length
        length -= 1 # 다 먹은 음식 제외
        previous = now # 이전 음식 시간 재설정

    # 남은 음식 중에서 몇 번째 음식인지 확인하여 출력
    result = sorted(q, key=lambda x: x[1]) # 음식의 번호 기준으로 정렬
    return result[(k - sum_value) % length][1]
